@model TDTU_IT_alumni_management_system.Models.Menu

@{
    ViewBag.Title = "Sửa menu";
    Layout = "~/Areas/Admin/Views/Shared/LayoutAdmin.cshtml";
}

<div class="panel panel-default">
    <div class="panel-body">
        <h2>Sửa menu</h2>
        <hr />
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.IDMenu)
                @Html.HiddenFor(model => model.order)
                @Html.HiddenFor(model => model.datebegin)
                <div class="form-group">
                    @Html.Label("Tên menu", htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Menu con", htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.HasChild, new SelectList(new List<SelectListItem>
                        {
                            new SelectListItem { Text = "Có", Value = "true" },
                            new SelectListItem { Text = "Không", Value = "false" }
                        }, "Value", "Text"), "Chọn", new { @class = "form-control" })
                    </div>
                </div>
                <div id="parentIDDropdown" class="form-group" style="display: none;">
                    @Html.Label("Nemu cha", htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.ParentID, ViewBag.ParentID as SelectList, "Chọn mục cha", htmlAttributes: new { @class = "form-control", name = "ParentID" })
                        @Html.ValidationMessageFor(model => model.ParentID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.meta, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.meta, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.meta, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Hiển thị", htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @{
                                bool hide = true;
                            }
                            @Html.CheckBoxFor(model => hide, new { style = "margin: -1px 5px" })
                            @Html.ValidationMessageFor(model => model.hide, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-1 col-md-10">
                        <input type="submit" value="Tạo" class="btn btn-primary" />
                        <div class="btn btn-secondary">
                            <a href="/quan-ly">Trở về</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<script>
    window.onload = active();
    function active() {
        if (document.getElementById("nav-menus").className == "") {
            document.getElementById("nav-menus").className = "active";
        }
        if (document.getElementById("nav-subpage").className == "collapsed") {
            document.getElementById("nav-subpage").className = "collapsed active";
        }
    }
    $(document).ready(function () {
        var hasChildValue = $('#HasChild').val(); 

        if (hasChildValue === "false") { 
            $('#parentIDDropdown').show(); 
        } else {
            $('#parentIDDropdown').hide(); 
            $('#ParentID').val(null);
        }

        $('#HasChild').change(function () {
            var hasChildValue = $(this).val();
            if (hasChildValue === "false") { 
                $('#parentIDDropdown').show(); 
            } else {
                $('#parentIDDropdown').hide(); 
                $('#ParentID').val(null); 
            }
        });
    });
    function removeDiacritics(str) {
        return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    }

    $("#Title").keyup(function () {
        var text = $(this).val().toLowerCase();
        var textWithoutDiacritics = removeDiacritics(text);
        var text_create = textWithoutDiacritics.replace(/\s+/g, '-').replace(/[^a-z0-9\-]/g, '');
        $('#meta').val(text_create);
    }).keyup();

</script>