@model TDTU_IT_alumni_management_system.Models.Notify

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/LayoutAdmin.cshtml";
    var graduationInfoList = ViewBag.GraduationInfoList as List<TDTU_IT_alumni_management_system.Models.GraduationInfo>;
}
<div class="panel panel-default">
    <div class="panel-body">
        <h2>Tạo thông báo</h2>
        @using (Html.BeginForm("Create", "Notifies", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Notify</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @required = true } })
                        <div id="wordCountTitle" class="text-danger"></div>
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Mô tả", htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @required = true, @maxlength = "250" })
                        <div id="wordCountDescription" class="text-danger"></div>
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Nội dung", htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Content, new { htmlAttributes = new { @class = "form-control", @required = true } })
                        @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Đối tượng", htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-3">
                        @Html.DropDownListFor(model => model.TargetType, new SelectList(new[] { new { Value = true, Text = "Nhóm" }, new { Value = false, Text = "Chung" } }, "Value", "Text"), "Chọn", new { @class = "form-control", @required = true, id = "TargetTypeDropdown" })
                        @Html.ValidationMessageFor(model => model.TargetType, "", new { @class = "text-danger" })
                    </div>
                    @Html.Label("Hiển thị", htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-4">
                        <div class="checkbox">
                            @{
                                bool hide = true;
                            }
                            @Html.CheckBoxFor(model => hide, new { style = "margin: -1px 5px" })
                            @Html.ValidationMessageFor(model => model.hide, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <!-- Dropdown cho việc chọn thông tin tốt nghiệp -->
                <div class="form-group" id="GraduationInfoDropdown">
                    @Html.Label("Nhóm", htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-10">
                        @{
                            var dropdownItems = graduationInfoList.Select(info => new SelectListItem
                            {
                                Text = $"{info.Majors} - {info.GraduationYear}",
                                Value = info.ID.ToString()
                            });
                        }
                        @Html.DropDownListFor(model => model.GraduationInfoID, dropdownItems, "Chọn", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.GraduationInfoID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.meta, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.meta, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.meta, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-1 col-md-10">
                        <input type="submit" value="Tạo" class="btn btn-primary" />
                    </div>
                    <div class="btn btn-secondary">
                        <a href="/quan-ly/thong-bao">
                            Trở về
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<script src="~/Areas/Admin/Content/ckeditor/ckeditor.js"></script>
<script type="text/javascript">

    CKEDITOR.replace("Content", {
        height: '400px',
        customConfig: '/Areas/Admin/Content/ckeditor/config.js'
    });
    function removeDiacritics(str) {
        return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    }

    $("#Title").keyup(function () {
        var text = $(this).val().toLowerCase();
        var textWithoutDiacritics = removeDiacritics(text);
        var text_create = textWithoutDiacritics.replace(/\s+/g, '-').replace(/[-]+/g, '-').replace(/[^a-z0-9\-]/g, '');
        $('#meta').val(text_create);
    }).keyup()

    $(document).ready(function () {
        // Ẩn dropdown của GraduationInfo khi trang load
        $("#GraduationInfoDropdown").hide();
        $("#TargetTypeDropdown").change(function () {
            var selectedValue = $(this).val();

            // Nếu TargetType là "Nhóm", hiển thị dropdown của GraduationInfo, ngược lại ẩn đi
            if (selectedValue === "True") {
                $("#GraduationInfoDropdown").show();
            } else {
                $("#GraduationInfoDropdown").hide();
                // Nếu TargetType là "Chung", đặt giá trị của GraduationInfoID thành null
                $("#GraduationInfoID").val(null);
            }
        });
    });
    $(document).ready(function () {
        $('#Description').on('input', function () {
            var words = this.value.match(/\S+/g).length;
            if (words > 50) {
                var trimmed = $(this).val().split(/\s+/, 50).join(" ");
                $(this).val(trimmed + " ...");
                $('#wordCountDescription').text("Chỉ được nhập tối đa 50 từ.");
            } else {
                $('#wordCountDescription').text('Số từ: ' + words + '/50');
            }
        });
    });

    $(document).ready(function () {
        $('#Title').on('input', function () {
            var words = this.value.match(/\S+/g).length;
            if (words > 40) {
                var trimmed = $(this).val().split(/\s+/, 40).join(" ");
                $(this).val(trimmed + " ...");
                $('#wordCountTitle').text("Chỉ được nhập tối đa 40 từ.");
            } else {
                $('#wordCountTitle').text('Số từ: ' + words + '/40');
            }
        });
    });
    window.onload = active();
    function active() {
        if (document.getElementById("nav-notifi").className == "") {
            document.getElementById("nav-notifi").className = "active";
        }
    }
</script>